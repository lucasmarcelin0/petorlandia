"""simplify endereco model

Revision ID: 06494e44f482
Revises: 1ae6f98823c1
Create Date: 2025-07-03 17:21:31.993100

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '06494e44f482'
down_revision = '1ae6f98823c1'
branch_labels = None
depends_on = None


def upgrade():
    # Remover as tabelas na ordem correta (do mais dependente para o menos dependente)
    op.drop_constraint('endereco_bairro_id_fkey', 'endereco', type_='foreignkey')
    
    with op.batch_alter_table('endereco', schema=None) as batch_op:
        batch_op.drop_column('bairro_id')
        batch_op.add_column(sa.Column('bairro', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('cidade', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('estado', sa.String(length=2), nullable=True))
        batch_op.alter_column('cep',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=9),
               nullable=False)
        batch_op.alter_column('rua',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)

    # Agora sim, deletar as tabelas em ordem segura
    op.drop_table('bairro')
    op.drop_table('cidade')
    op.drop_table('estado')
    op.drop_table('pais')



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('endereco', schema=None) as batch_op:
        batch_op.add_column(sa.Column('bairro_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('endereco_bairro_id_fkey'), 'bairro', ['bairro_id'], ['id'])
        batch_op.alter_column('rua',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)
        batch_op.alter_column('cep',
               existing_type=sa.String(length=9),
               type_=sa.VARCHAR(length=10),
               nullable=True)
        batch_op.drop_column('estado')
        batch_op.drop_column('cidade')
        batch_op.drop_column('bairro')

    op.create_table('pais',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('pais_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('sigla', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='pais_pkey'),
    sa.UniqueConstraint('sigla', name='pais_sigla_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('bairro',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('cidade_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['cidade_id'], ['cidade.id'], name=op.f('bairro_cidade_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('bairro_pkey'))
    )
    op.create_table('estado',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('estado_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('sigla', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('pais_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['pais_id'], ['pais.id'], name='estado_pais_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='estado_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('cidade',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('estado_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['estado_id'], ['estado.id'], name=op.f('cidade_estado_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('cidade_pkey'))
    )
    # ### end Alembic commands ###
